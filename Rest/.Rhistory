rsconnect::setAccountInfo(name='yspanimal-free',
token='82710C016F0D344031146A15973EC36D',
secret='JdhMsH2DN3OCjoxthI8+75hp/5WpvE4+WFlQaFsw')
devtools::install_github("rstudio/addinexamples", type = "source")
install.packages("library(rPython)
# Load/run the main Python script
python.load("GetNewRedditSubmissions.py")
# Get the variable
new_subs_data <- python.get("new_subs")
# Load/run re-fecth script
python.load("RefreshNewSubs.py")
# Get the updated variable
new_subs_data <- python.get("new_subs")
head(new_subs_data)")
install.packages("rPython")
##https://inclass.kaggle.com/c/restaurant-reviews
library(ggplot2)
library(data.table)
library(dplyr)
library(tm)
library(slam)
setwd("C:/R_repositories/Kaggle/Rest")
destFile <- "1-restaurant-train.csv"
if (file.exists(destFile)){
#ResReviewDataTrain <- readLines(destFile)#fread(destFile, sep= "?", header = FALSE)
ResReviewDataTrain <- fread(destFile, nrows = 36024)#, sep= "?", header = FALSE)
#ResReviewDataTrain2 <- fread(destFile, sep= "?", header = FALSE)
}
ResReviewDataTrain <- mutate(ResReviewDataTrain, review = ifelse(V1>=4, 1, 0)) %>% select(- V1)
DataTrainPos <- filter(ResReviewDataTrain, review == 1)
DataTrainNeg <- filter(ResReviewDataTrain, review == 0)
Pos.cor <- VectorSource(DataTrainPos$V2) %>% Corpus()
Pos.cor <- tm_map(Pos.cor, content_transformer(tolower))
Pos.cor <- tm_map(Pos.cor, removePunctuation)
Pos.cor <- tm_map(Pos.cor, removeNumbers)
#StopWords <- c(stopwords("english"))
Pos.cor <- tm_map(Pos.cor, removeWords, stopwords("english"))
#Pos.cor <- tm_map(Pos.cor, stripWhitespace)
DTMPos <- DocumentTermMatrix(Pos.cor)
DTMPos <- removeSparseTerms(DTMPos, 0.98)
DTMPos_Mat <- as.matrix(DTMPos)
DTMPos_v <- sort(colSums(DTMPos_Mat),decreasing=TRUE)
DTMPos_d <- data.frame(word = names(DTMPos_v),freq=DTMPos_v)
table(DTMPos_d$freq)
Neg.cor <- VectorSource(DataTrainNeg$V2) %>% Corpus()
Neg.cor <- tm_map(Neg.cor, content_transformer(tolower))
Neg.cor <- tm_map(Neg.cor, removePunctuation)
Neg.cor <- tm_map(Neg.cor, removeNumbers)
#StopWords <- c(stopwords("english"))
Neg.cor <- tm_map(Neg.cor, removeWords, stopwords("english"))
#Pos.cor <- tm_map(Pos.cor, stripWhitespace)
DTMNeg <- DocumentTermMatrix(Neg.cor)
DTMNeg <- removeSparseTerms(DTMNeg, 0.98)
DTMNeg_Mat <- as.matrix(DTMNeg)
DTMNeg_v <- sort(colSums(DTMNeg_Mat),decreasing=TRUE)
DTMNeg_d <- data.frame(word = names(DTMNeg_v),freq=DTMNeg_v)
table(DTMNeg_d$freq)
Pos.cor <- VectorSource(DataTrainPos$V2) %>% Corpus()
Pos.cor <- tm_map(Pos.cor, content_transformer(tolower))
Pos.cor <- tm_map(Pos.cor, removePunctuation)
Pos.cor <- tm_map(Pos.cor, removeNumbers)
Pos.cor <- tm_map(Pos.cor, removeWords, stopwords("english"))
Pos.cor <- tm_map(Pos.cor, stripWhitespace)
DTMPos <- DocumentTermMatrix(Pos.cor)
DTMPos <- removeSparseTerms(DTMPos, 0.98)
DTMPos_Mat <- as.matrix(DTMPos)
DTMPos_v <- sort(colSums(DTMPos_Mat),decreasing=TRUE)
DTMPos_d <- data.frame(word = names(DTMPos_v),freq=DTMPos_v)
library(RWeka)
install.packages("RWeka")
##https://inclass.kaggle.com/c/restaurant-reviews
library(ggplot2)
library(data.table)
library(dplyr)
library(tm)
library(slam)
library(RWeka)
setwd("C:/R_repositories/Kaggle/Rest")
destFile <- "1-restaurant-train.csv"
if (file.exists(destFile)){
#ResReviewDataTrain <- readLines(destFile)#fread(destFile, sep= "?", header = FALSE)
ResReviewDataTrain <- fread(destFile, nrows = 36024)#, sep= "?", header = FALSE)
#ResReviewDataTrain2 <- fread(destFile, sep= "?", header = FALSE)
}
ResReviewDataTrain <- mutate(ResReviewDataTrain, review = ifelse(V1>=4, 1, 0)) %>% select(- V1)
DataTrainPos <- filter(ResReviewDataTrain, review == 1)
DataTrainNeg <- filter(ResReviewDataTrain, review == 0)
Pos.cor <- VectorSource(DataTrainPos$V2) %>% Corpus()
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
Pos.cor <- tm_map(Pos.cor, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "@[^\\s]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "[^\\p{L}\\s[']]+")
Pos.cor <- tm_map(Pos.cor, content_transformer(tolower))
Pos.cor <- tm_map(Pos.cor, removePunctuation)
Pos.cor <- tm_map(Pos.cor, removeNumbers)
Pos.cor <- tm_map(Pos.cor, removeWords, stopwords("english"))
Pos.cor <- tm_map(Pos.cor, stripWhitespace)
DTMPos <- DocumentTermMatrix(Pos.cor)
DTMPos <- removeSparseTerms(DTMPos, 0.98)
Neg.cor <- VectorSource(DataTrainNeg$V2) %>% Corpus()
Neg.cor <- tm_map(Neg.cor, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
Neg.cor <- tm_map(Neg.cor, toSpace, "@[^\\s]+")
Neg.cor <- tm_map(Neg.cor, toSpace, "[^\\p{L}\\s[']]+")
Neg.cor <- tm_map(Neg.cor, content_transformer(tolower))
Neg.cor <- tm_map(Neg.cor, removePunctuation)
Neg.cor <- tm_map(Neg.cor, removeNumbers)
Neg.cor <- tm_map(Neg.cor, removeWords, stopwords("english"))
Neg.cor <- tm_map(Neg.cor, stripWhitespace)
DTMNeg <- DocumentTermMatrix(Neg.cor)
DTMNeg <- removeSparseTerms(DTMNeg, 0.98)
library(RWeka)
options(mc.cores=1)
Tokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 1))
unigram <- DocumentTermMatrix(Neg.cor, control = list(tokenize = Tokenizer))
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram <- DocumentTermMatrix(Neg.cor, control = list(tokenize = BigramTokenizer))
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
trigram <- DocumentTermMatrix(Neg.cor, control = list(tokenize = TrigramTokenizer))
bigramPos <- removeSparseTerms(bigram, 0.98)
trigramNeg <- removeSparseTerms(trigram, 0.98)
trigramNeg <- removeSparseTerms(trigram, 0.5)
trigramNeg <- removeSparseTerms(trigram, 0.05)
trigramNeg <- removeSparseTerms(trigram, 0.01)
inspect(trigram)
trigramNeg <- removeSparseTerms(trigram, 0.9999)
bigramNeg <- removeSparseTerms(bigram, 0.99)
trigramNeg <- removeSparseTerms(trigram, 0.99)
trigramNeg <- removeSparseTerms(trigram, 0.9999)
tm_trifreq <- sort(colSums(as.matrix(trigramNeg)), decreasing=TRUE)
tm_triwordfreq <- data.frame(word=names(tm_trifreq), freq=tm_trifreq)
head(tm_triwordfreq,5)
trigramNeg <- removeSparseTerms(bigram, 0.9999)
tm_trifreq <- sort(colSums(as.matrix(trigramNeg)), decreasing=TRUE)
tm_triwordfreq <- data.frame(word=names(tm_trifreq), freq=tm_trifreq)
head(tm_triwordfreq,5)
trigramNeg <- removeSparseTerms(trigram, 0.9999)
tm_trifreq <- sort(colSums(as.matrix(bigramNeg)), decreasing=TRUE)
tm_triwordfreq <- data.frame(word=names(tm_trifreq), freq=tm_trifreq)
head(tm_triwordfreq,5)
##https://inclass.kaggle.com/c/restaurant-reviews
library(ggplot2)
library(data.table)
library(dplyr)
library(tm)
library(slam)
library(RWeka)
##################################################
setwd("C:/R_repositories/Kaggle/Rest")
destFile <- "1-restaurant-train.csv"
if (file.exists(destFile)){
#ResReviewDataTrain <- readLines(destFile)#fread(destFile, sep= "?", header = FALSE)
ResReviewDataTrain <- fread(destFile, nrows = 36024)#, sep= "?", header = FALSE)
#ResReviewDataTrain2 <- fread(destFile, sep= "?", header = FALSE)
}
ResReviewDataTrain <- mutate(ResReviewDataTrain, review = ifelse(V1>=4, 1, 0)) %>% select(- V1)
DataTrainPos <- filter(ResReviewDataTrain, review == 1)
DataTrainNeg <- filter(ResReviewDataTrain, review == 0)
Pos.cor <- VectorSource(DataTrainPos$V2) %>% Corpus()
meta(Pos.cor, tag = "type") <- "Positive"
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
#Pos.cor <- tm_map(Pos.cor, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "@[^\\s]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "[^\\p{L}\\s[']]+")
Pos.cor <- tm_map(Pos.cor, content_transformer(tolower))
Pos.cor <- tm_map(Pos.cor, removePunctuation)
##https://inclass.kaggle.com/c/restaurant-reviews
library(ggplot2)
library(data.table)
library(dplyr)
library(tm)
library(slam)
library(RWeka)
##################################################
setwd("C:/R_repositories/Kaggle/Rest")
destFile <- "1-restaurant-train.csv"
if (file.exists(destFile)){
#ResReviewDataTrain <- readLines(destFile)#fread(destFile, sep= "?", header = FALSE)
ResReviewDataTrain <- fread(destFile, nrows = 36024)#, sep= "?", header = FALSE)
#ResReviewDataTrain2 <- fread(destFile, sep= "?", header = FALSE)
}
ResReviewDataTrain <- mutate(ResReviewDataTrain, review = ifelse(V1>=4, 1, 0)) %>% select(- V1)
DataTrainPos <- filter(ResReviewDataTrain, review == 1)
DataTrainNeg <- filter(ResReviewDataTrain, review == 0)
Pos.cor <- VectorSource(DataTrainPos$V2) %>% Corpus()
meta(Pos.cor, tag = "type") <- "Positive"
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
#Pos.cor <- tm_map(Pos.cor, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "@[^\\s]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "[^\\p{L}\\s[']]+")
Pos.cor <- tm_map(Pos.cor, content_transformer(tolower))
Pos.cor <- tm_map(Pos.cor, removePunctuation)
Pos.cor <- tm_map(Pos.cor, removeNumbers)
Pos.cor <- tm_map(Pos.cor, removeWords, stopwords("english"))
Pos.cor <- tm_map(Pos.cor, stripWhitespace)
DTMPos <- DocumentTermMatrix(Pos.cor)
DTMPos <- removeSparseTerms(DTMPos, 0.98)
Neg.cor <- VectorSource(DataTrainNeg$V2) %>% Corpus()
meta(Pos.cor, tag = "type") <- "Negative"
#Neg.cor <- tm_map(Neg.cor, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
Neg.cor <- tm_map(Neg.cor, toSpace, "@[^\\s]+")
Neg.cor <- tm_map(Neg.cor, toSpace, "[^\\p{L}\\s[']]+")
Neg.cor <- tm_map(Neg.cor, content_transformer(tolower))
Neg.cor <- tm_map(Neg.cor, removePunctuation)
Neg.cor <- tm_map(Neg.cor, removeNumbers)
Neg.cor <- tm_map(Neg.cor, removeWords, stopwords("english"))
Neg.cor <- tm_map(Neg.cor, stripWhitespace)
DTMNeg <- DocumentTermMatrix(Neg.cor)
DTMNeg <- removeSparseTerms(DTMNeg, 0.98)
Pos.cor <- VectorSource(DataTrainPos$V2) %>% Corpus()
meta(Pos.cor, tag = "type") <- "Positive"
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
#Pos.cor <- tm_map(Pos.cor, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
Pos.cor <- tm_map(Pos.cor, toSpace, "@[^\\s]+") %>%
tm_map(toSpace, "[^\\p{L}\\s[']]+") %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace)
instpect(Pos.cor)
inspect(Pos.cor)
inspect(Pos.cor[[1]])
Pos.cor[[1]]
Pos.cor[[1]]$meta
meta(Pos.cor, tag = "type") <- "Negative"
Pos.cor[[1]]$meta
library(RWeka)
options(mc.cores=1)
Tokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 1))
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
unigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = Tokenizer))
bigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = BigramTokenizer))
trigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = TrigramTokenizer))
bigramNeg <- removeSparseTerms(bigramNeg, 0.98)
trigramNeg <- removeSparseTerms(trigramNeg, 0.9999)
unigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = Tokenizer))
bigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = BigramTokenizer))
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
bigramPos <- removeSparseTerms(bigramPos, 0.98)
trigramPos <- removeSparseTerms(trigramPos, 0.9999)
unigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = Tokenizer))
bigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = BigramTokenizer))
trigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = TrigramTokenizer))
unigramNeg <- removeSparseTerms(unigramNeg, 0.98)
bigramNeg <- removeSparseTerms(bigramNeg, 0.99)
trigramNeg <- removeSparseTerms(trigramNeg, 0.9999)
unigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = Tokenizer))
bigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = BigramTokenizer))
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
unigramPos <- removeSparseTerms(unigramPos, 0.98)
bigramPos <- removeSparseTerms(bigramPos, 0.99)
trigramPos <- removeSparseTerms(trigramPos, 0.9999)
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
trigramPos
bigramPos
unigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = Tokenizer))
bigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = BigramTokenizer))
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
unigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = Tokenizer))
bigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = BigramTokenizer))
trigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = TrigramTokenizer))
trigramPos
bigramPos
trigramPosT <- removeSparseTerms(trigramPos, 0.999)
trigramPosT
trigramPosT <- removeSparseTerms(trigramPos, 0.995)
trigramPosT
trigramPosT <- removeSparseTerms(trigramPos, 0.99)
trigramPosT
trigramNeg <- removeSparseTerms(trigramNeg, 0.99)
trigramNeg
trigramPos <- removeSparseTerms(trigramPos, 0.99)
trigramPos
unigramNeg
unigramPos
bigramPos
unigramPos
Pos.cor
DTMPos
DTMNeg
DTMPos <- DocumentTermMatrix(Pos.cor)
DTMNeg <- DocumentTermMatrix(Neg.cor)
DTMNeg
DTMPos
unigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = Tokenizer))
bigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = BigramTokenizer))
trigramNeg <- DocumentTermMatrix(Neg.cor, control = list(tokenize = TrigramTokenizer))
unigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = Tokenizer))
bigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = BigramTokenizer))
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
unigramNeg
bigramNeg
trigramNeg
unigramPos
trigramPos
trigramPos <- removeSparseTerms(trigramPos, 0.99535)
trigramPos
as.matrix(trigramPos)
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
trigramPos <- removeSparseTerms(trigramPos, 0.995)
as.matrix(trigramPos)
tm_trifreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
tm_triwordfreq <- data.frame(word=names(tm_trifreq), freq=tm_trifreq)
head(tm_triwordfreq,5)
makePlot(tm_triwordfreq, "20 Most Common Trigram")
makePlot <- function(data, label) {
ggplot(data[1:20,], aes(reorder(word, -freq), freq)) +
labs(x = label, y = "Frequency") +
theme(axis.text.x = element_text(angle = 60, size = 12, hjust = 1)) +
geom_bar(stat = "identity", fill = I("grey50"))}
makePlot(tm_triwordfreq, "20 Most Common Trigram")
tm_triwordfreq
tm_trifreq
sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
trigramPos <- removeSparseTerms(trigramPos, 0.995)
tm_trifreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
tm_trifreq
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
trigramPos <- removeSparseTerms(trigramPos, 0.99)
tm_trifreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
tm_trifreq
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
trigramPos
trigramPos <- removeSparseTerms(trigramPos, 0.9999)
tm_trifreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
tm_trifreq
tm_trifreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
tm_trifreq
tm_triwordfreq <- data.frame(word=names(tm_trifreq), freq=tm_trifreq)
makePlot <- function(data, label) {
ggplot(data[1:20,], aes(reorder(word, -freq), freq)) +
labs(x = label, y = "Frequency") +
theme(axis.text.x = element_text(angle = 60, size = 12, hjust = 1)) +
geom_bar(stat = "identity", fill = I("grey50"))}
makePlot(tm_triwordfreq, "20 Most Common Trigram")
trigramPos <- DocumentTermMatrix(Pos.cor, control = list(tokenize = TrigramTokenizer))
Posfreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
Poswordfreq <- data.frame(word=names(Posfreq), freq=tm_trifreq)
head(Poswordfreq,5)
trigramPos <- removeSparseTerms(trigramPos, 0.9995)
Posfreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
Poswordfreq <- data.frame(word=names(Posfreq), freq=tm_trifreq)
head(Poswordfreq,5)
Posfreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
Negwordfreq <- data.frame(word=names(Posfreq), freq=Posfreq)
head(Negwordfreq,5)
Negwordfreq
Posfreq
makePlot(Negwordfreq, "20 Most Common Trigram")
Negfreq <- sort(colSums(as.matrix(trigramNeg)), decreasing=TRUE)
Negwordfreq <- data.frame(word=names(Negfreq), freq=Negfreq)
head(Negwordfreq,5)
Posfreq <- sort(colSums(as.matrix(trigramPos)), decreasing=TRUE)
Poswordfreq <- data.frame(word=names(Posfreq), freq=Posfreq)
head(Poswordfreq,5)
Negfreq <- sort(colSums(as.matrix(trigramNeg)), decreasing=TRUE)
Negwordfreq <- data.frame(word=names(Negfreq), freq=Negfreq)
head(Negwordfreq,5)
trigramNeg <- removeSparseTerms(trigramNeg, 0.9995)
Negfreq <- sort(colSums(as.matrix(trigramNeg)), decreasing=TRUE)
Negwordfreq <- data.frame(word=names(Negfreq), freq=Negfreq)
head(Negwordfreq,5)
makePlot(Negwordfreq, "20 Most Common Negative Trigram")
Negwordfreq
NegBiFreq <- GetWordFreq(bigramNeg)
GetWordFreq <- function(data) {
freq <- sort(colSums(as.matrix(data)), decreasing=TRUE) %>%
data.frame(word=names(freq), freq=freq)
}
NegBiFreq <- GetWordFreq(bigramNeg)
bigramNeg <- removeSparseTerms(bigramNeg, 0.99)
bigramNeg
NegBiFreq <- GetWordFreq(bigramNeg)
GetWordFreq <- function(data) {
fr <- sort(colSums(as.matrix(data)), decreasing=TRUE) %>%
data.frame(word=names(fr), freq=fr)
}
NegBiFreq <- GetWordFreq(bigramNeg)
GetWordFreq <- function(data) {
fr <- sort(colSums(as.matrix(data)), decreasing=TRUE)
data.frame(word=names(fr), freq=fr)
}
NegBiFreq <- GetWordFreq(bigramNeg)
makePlot(NegBiFreq, "20 Most Common Negative Bigram")
makePlot(Poswordfreq, "20 Most Common Positive Trigram")
makePlot(Negwordfreq, "20 Most Common Negative Trigram")
PosBiFreq <- GetWordFreq(bigramPos)
bigramPos <- removeSparseTerms(bigramPos, 0.99)
PosBiFreq <- GetWordFreq(bigramPos)
makePlot(PosBiFreq, "20 Most Common Negative Bigram")
makePlot(NegBiFreq, "20 Most Common Negative Bigram")
makePlot(PosBiFreq, "20 Most Common Negative Bigram")
library(grid) # for grids
library(gridExtra) # for advanced plots
PosTPlot <- makePlot(Poswordfreq, "20 Most Common Positive Trigram")
NegTPlot <- makePlot(Negwordfreq, "20 Most Common Negative Trigram")
NegBPlot <- makePlot(NegBiFreq, "20 Most Common Negative Bigram")
PosBPlot <- makePlot(PosBiFreq, "20 Most Common Negative Bigram")
grid.arrange(NegBPlot, PosBPlot, ncol = 2)
grid.arrange(PosTPlot, NegTPlot, ncol = 2)
View(ResReviewDataTrain)
##https://inclass.kaggle.com/c/restaurant-reviews
library(ggplot2)
library(data.table)
library(dplyr)
library(tm)
library(slam)
library(RWeka)
library(grid) # for grids
library(gridExtra) # for advanced plots
##################################################
setwd("C:/R_repositories/Kaggle/Rest")
destFile <- "1-restaurant-train.csv"
if (file.exists(destFile)){
#ResReviewDataTrain <- readLines(destFile)#fread(destFile, sep= "?", header = FALSE)
ResReviewDataTrain <- fread(destFile)#, nrows = 36024)#, sep= "?", header = FALSE)
#ResReviewDataTrain2 <- fread(destFile, sep= "?", header = FALSE)
}
ResReviewDataTrain <- fread(destFile)#, nrows = 36024)#, sep= "?", header = FALSE)
ResReviewDataTrain <- fread(destFile)#, nrows = 36024)#, sep= "?", header = FALSE)
detach(destFile)
